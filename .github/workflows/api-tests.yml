name: API Tests
# Adding this comment to force a new workflow run - Testing Playwright browser caching

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    # Use the official Playwright Docker image which has all dependencies pre-installed
    runs-on: ubuntu-latest
    container:
      # Use the official Playwright Docker image with Ubuntu Jammy (22.04 LTS) base
      image: mcr.microsoft.com/playwright:v1.42.0-jammy
      options: --ipc=host

    services:
      # Set up PostgreSQL service for tests
      postgres:
        image: postgres:15
        env:
          # Match local test environment credentials
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Check if PostgreSQL client exists and install if needed
      - name: Ensure PostgreSQL client is available
        run: |
          if ! command -v psql &> /dev/null; then
            echo "PostgreSQL client not found. Installing..."
            apt-get update
            apt-get install -y postgresql-client
          else
            echo "PostgreSQL client is already installed"
            psql --version
          fi

      - name: Debug PostgreSQL Connection
        run: |
          echo "Testing PostgreSQL connection..."
          # Check PostgreSQL version
          PGPASSWORD=password psql -h postgres -U admin -d postgres -c 'SELECT version();'

          echo "List all databases..."
          PGPASSWORD=password psql -h postgres -U admin -d postgres -c '\l'

          echo "Creating test database..."
          PGPASSWORD=password psql -h postgres -U admin -d postgres -c 'DROP DATABASE IF EXISTS recurse_bookings_test;'
          PGPASSWORD=password psql -h postgres -U admin -d postgres -c 'CREATE DATABASE recurse_bookings_test;'

          echo "Verifying test database..."
          PGPASSWORD=password psql -h postgres -U admin -d postgres -c '\l'

      - name: Set up environment
        run: |
          # Create .env.test file with the same credentials as local test environment
          cat > .env.test << EOF
          VITE_DB_USER=admin
          VITE_DB_HOST=postgres
          VITE_DB_NAME=recurse_bookings_test
          VITE_DB_PASSWORD=password
          VITE_DB_PORT=5432
          VITE_DB_SSL=false
          VITE_RECURSE_CLIENT_ID=test_client_id
          VITE_RECURSE_CLIENT_SECRET=test_client_secret
          VITE_OAUTH_REDIRECT_URI=http://localhost:5173/oauth/callback
          GITHUB_ACTIONS=true
          EOF

          # Print environment for debugging
          echo "Current environment:"
          env | grep -E 'PG|VITE|GITHUB'

          # Copy .env.test to .env for compatibility
          cp .env.test .env

          # Run our direct database setup script
          echo "Running direct database setup script..."
          node scripts/direct-db-setup.js

      # No need to cache or install Playwright browsers or dependencies - the Docker image has everything!

      - name: Run API tests
        run: npm run test:api
        env:
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: results/junit-api.xml

      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            playwright-report/
            test-results/
